Memoria Ejercicio 1c:

¿Por qué es asi?

Podemos ver que el tiempo de ejecucion del programa difiere bastante entre el modo normal y el sorted. Este efecto se ve sobretodo en el tiempo
de construicción del árbol, pues este proceso requiere mas iteraciones y el alargamiento del tiempo se acumula.
Cuando se ejecuta el modo normal, los nodos se insertan en el arbol en el orden en el que han sido leídos, cuando se ejecuta el modo sorted, primero se ordena
el array de elementos leídos del fichero, y después se insertan en el arbol de manera óptima, es decir, se va insertando la mediana de cada "segmento" del array,
partiéndolo en dos nuevos fragmentos y llamando de manera recursiva a insertar de nuevo las medianas, hasta que el fragmento se quede sin elementos.
Al hacer esto con el array ordenado, se forma un arbol de búsqueda óptimo, en el que la busqueda e inserción de un elemento tiene una complejidad temporal de nlog2n.
Este resultado se ve en la eficiencia de ejecucion del programa, construyendo un árbol menos profundo.

¿Hay alguna propiedad del árbol que permita explicar este comportamiento?

Al insertar elementos en el árbol de manera óptima, logramos terminar con un arbol de profundidad menor a la que conseguiríamos con el unsorted, lo que implica que 
para cada iteracion con el árbol requiere menos pasos y por ende, menos tiempo.





Memoria Ejercicio 2:

¿Qué diferencias y similitudes hay entre el TAD SQ y el TAD Cola de la práctica
anterior?

Ambas estructuras de datos almacenan un conjunto de elementos en un orden determinado y se operan mediante las funciones Push y Pop. Sin embargo, mientras que la cola se rige por la regla "First in First Out" o "FIFO", ordenando los elementos según su orden de llegada, la SQ toma una relación de orden (definida por la función de comparación dada) y decide en base a ella las posiciones de los elementos. De este modo, mientras que en la cola "pop" devuelve el primer elemento que se introdujo y push sitúa el nuevo elemento al final, en el caso de la SQ, pop devuelve el menor elemento entre los presentes y "push" inserta los elementos acorde al orden establecido.

¿Qué coste (aproximado) tiene la operación de extraer un elemento en el TAD SQ?
El coste aproximado de la extracción de los elementos es O(log(n)) en caso de que el árbol subyacente sea completo o esté cerca de serlo, y O(n) en el peor de los casos, donde el árbol es una fila de elementos ordenados, siendo n el número de elementos en la SQ.
¿Sería posible hacer que esta operación fuera 𝒪(1)?
Esto no sería posible, pues la extracción del elemento mínimo siempre requiere 1) su búsqueda y 2)el hallazgo de un nuevo elemento mínimo. Por este motivo, incluso si de incluyese en el TAD SQ un puntero al elemento mínimo, que podría parecer una solución atractiva, lo cierto es que eliminar el elemento al que apunta dicho puntero requeriría igualmente recorrer el árbol para encontrar el siguiente elemento más pequeño.  

